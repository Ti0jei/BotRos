import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'supersecretkey';

export function authMiddleware(req, res, next) {
  const authHeader = req.headers['authorization'];

  // üîê –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  console.log('üîê [authMiddleware] Authorization Header:', authHeader);

  if (!authHeader || typeof authHeader !== 'string' || !authHeader.startsWith('Bearer ')) {
    console.warn('‚ö†Ô∏è authMiddleware ‚Üí –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  const token = authHeader.split(' ')[1];
  console.log('üßæ [authMiddleware] JWT token:', token);

  try {
    const decoded = jwt.verify(token, JWT_SECRET);

    console.log('üì¨ [authMiddleware] Decoded JWT payload:', decoded);

    if (!decoded?.userId) {
      console.warn('‚ö†Ô∏è authMiddleware ‚Üí JWT –±–µ–∑ userId');
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    req.user = {
      id: decoded.userId,
      userId: decoded.userId,
      role: decoded.role || 'USER',
    };

    console.log('‚úÖ [authMiddleware] req.user —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:', req.user);

    next();
  } catch (err) {
    console.error('‚ùå authMiddleware ‚Üí JWT –æ—à–∏–±–∫–∞:', err.message);
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
}
