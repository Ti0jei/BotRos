import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

import authRoutes from './routes/auth.mjs';
import profileRoutes from './routes/profile.mjs';
import clientsRoutes from './routes/clients.mjs';
import trainingsRoutes from './routes/trainings/index.mjs';
import usersRoute from './routes/users.mjs';
import paymentBlocksRoutes from './routes/payment-blocks.mjs';
import notificationRoutes from './routes/notifications.mjs';
import inviteCodeRoutes from './routes/invite-code.mjs';
import nutritionRoutes from './routes/nutrition.mjs';
import resetPasswordRoutes from './routes/reset-password.mjs';
import workoutRoutes from './routes/workoutTemplates.mjs';
import exercisesRoutes from './routes/exercises.mjs'; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û

import { authMiddleware } from './middleware/auth.mjs';
import { resend } from './utils/resend.mjs';
import './cron/nutritionReminder.mjs';

const app = express();
const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// -------------------- Middleware --------------------
app.use(cors({
  origin: process.env.WEB_APP_URL || '*',
  credentials: true,
}));
app.options('*', cors());
app.use(express.json());

// -------------------- Logging --------------------
process.on('uncaughtException', (err) => {
  console.error('‚ùó Uncaught Exception:', err);
});
process.on('unhandledRejection', (err) => {
  console.error('‚ùó Unhandled Rejection:', err);
});

console.log('üß™ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞... NODE_ENV =', NODE_ENV);
console.log('üß™ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É:', PORT);

// -------------------- Health-check --------------------
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'üü¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç', timestamp: new Date().toISOString() });
});

// -------------------- API –º–∞—Ä—à—Ä—É—Ç—ã --------------------
app.use('/api/auth', authRoutes);
app.use('/api/profile', authMiddleware, profileRoutes);
app.use('/api/clients', authMiddleware, clientsRoutes);
app.use('/api/trainings', authMiddleware, trainingsRoutes);
app.use('/api/users', usersRoute);
app.use('/api/payment-blocks', paymentBlocksRoutes);
app.use('/api/notifications', authMiddleware, notificationRoutes);
app.use('/api/invite-code', inviteCodeRoutes);
app.use('/api/nutrition', authMiddleware, nutritionRoutes);
app.use('/api/reset-password', resetPasswordRoutes);
app.use('/api/workout-templates', authMiddleware, workoutRoutes);
app.use('/api/exercises', authMiddleware, exercisesRoutes); // ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–û

// -------------------- IP --------------------
app.get('/ip', async (req, res) => {
  try {
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    res.send(`üåê –í–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞: ${data.ip}`);
  } catch (err) {
    console.error('‚ùå IP fetch error:', err.message);
    res.status(500).send('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP');
  }
});

// -------------------- Email —Ç–µ—Å—Ç --------------------
app.get('/api/test-email', async (req, res) => {
  try {
    const to = 'zoty2104@gmail.com';
    const from = process.env.EMAIL_FROM;

    if (!from) {
      return res.status(400).json({ error: 'EMAIL_FROM –Ω–µ –∑–∞–¥–∞–Ω' });
    }

    const result = await resend.emails.send({
      from,
      to,
      subject: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Resend',
      html: `<p>–ï—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî Resend —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>`,
    });

    console.log('üì§ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result);
    res.json({ success: true, result });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞', details: err });
  }
});

// -------------------- –§—Ä–æ–Ω—Ç --------------------
if (NODE_ENV === 'production') {
  const frontendDistPath = path.join(__dirname, '../frontend/dist');
  if (fs.existsSync(frontendDistPath)) {
    app.use(express.static(frontendDistPath));
    app.get('*', (req, res) => {
      res.sendFile(path.join(frontendDistPath, 'index.html'));
    });
  } else {
    console.warn('‚ö†Ô∏è –ü–∞–ø–∫–∞ frontend/dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
}

// -------------------- –ó–∞–ø—É—Å–∫ --------------------
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// -------------------- Telegram –±–æ—Ç --------------------
(async () => {
  const botPath = path.join(__dirname, './bot.mjs');
  if (fs.existsSync(botPath)) {
    try {
      await import(botPath);
      console.log('ü§ñ Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram-–±–æ—Ç–∞:', err.message);
    }
  } else {
    console.log('‚ö†Ô∏è –§–∞–π–ª bot.mjs –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  }
})();
