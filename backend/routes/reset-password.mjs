import express from 'express';
import { PrismaClient } from '@prisma/client';
import crypto from 'crypto';
import bcrypt from 'bcryptjs';
import { resend } from '../utils/resend.mjs';

const router = express.Router();
const prisma = new PrismaClient();

// üîπ –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
router.post('/request', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

  console.log('üì© [reset-request] –ó–∞–ø—Ä–æ—Å –Ω–∞ email:', email);

  try {
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      console.log('‚õî Email –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
      return res.status(200).json({ ok: true }); // –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ
    }

    const token = crypto.randomBytes(32).toString('hex');
    const expires = new Date(Date.now() + 60 * 60 * 1000); // 1 —á–∞—Å

    await prisma.user.update({
      where: { id: user.id },
      data: {
        resetToken: token,
        resetTokenExpires: expires,
      },
    });

    const resetUrl = `https://ti0jei-botros-040b.twc1.net/reset-password?token=${token}`;
    console.log('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å:', resetUrl);

    const result = await resend.emails.send({
      from: 'Krissfit Support <support@krissfit.ru>',
      to: email,
      subject: 'üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ Krissfit',
      html: `
        <div style="font-family: Inter, sans-serif; background-color: #f7f7f7; padding: 40px;">
          <div style="max-width: 420px; margin: auto; background-color: white; border-radius: 16px; padding: 32px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">
            <h2 style="margin-bottom: 16px; color: #1a1a1a; font-size: 20px;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
            <p style="font-size: 15px; color: #1a1a1a;">–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –≤ Krissfit.</p>

            <div style="text-align: center; margin: 24px 0;">
              <a href="${resetUrl}" 
                style="display: inline-block; background-color: #f06595; color: white; padding: 12px 24px; border-radius: 8px; text-decoration: none; font-size: 15px; font-weight: 600;">
                –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </a>
            </div>

            <p style="font-size: 14px; color: #777;">
              –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            </p>
          </div>

          <p style="text-align: center; margin-top: 24px; font-size: 13px; color: #aaa;">
            @Krissfit_bot
          </p>
        </div>
      `,
      text: `–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –≤ Krissfit.\n–°–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ —Å—Å—ã–ª–∫–µ:\n${resetUrl}\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.`,
      reply_to: 'support@krissfit.ru',
    });

    console.log('üì® [Resend] —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    res.json({ ok: true });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è' });
  }
});

// üîπ –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
router.post('/confirm', async (req, res) => {
  const { token, password } = req.body;
  if (!token || !password) return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });

  try {
    const user = await prisma.user.findFirst({
      where: {
        resetToken: token,
        resetTokenExpires: { gt: new Date() },
      },
    });

    if (!user) {
      console.warn('‚õî –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫:', token);
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    }

    const hashed = await bcrypt.hash(password, 10);

    await prisma.user.update({
      where: { id: user.id },
      data: {
        password: hashed,
        resetToken: null,
        resetTokenExpires: null,
      },
    });

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è:', user.email);
    res.json({ ok: true });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è' });
  }
});

export default router;
