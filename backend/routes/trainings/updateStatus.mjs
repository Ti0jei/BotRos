import express from 'express';
import { PrismaClient } from '@prisma/client';
import { notifyTelegram } from '../../bot/notifications.mjs';
import { shouldNotifyUser, shouldNotifyTrainer } from '../../lib/antiSpam.mjs';
import jwt from 'jsonwebtoken';

const router = express.Router();
const prisma = new PrismaClient();

router.patch('/:id', async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  let userId = null;

  // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å userId –∏–∑ JWT-—Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
  try {
    const authHeader = req.headers.authorization;
    if (authHeader?.startsWith('Bearer ')) {
      const token = authHeader.split(' ')[1];
      const decoded = jwt.decode(token);
      if (decoded && typeof decoded === 'object' && decoded.userId) {
        userId = decoded.userId;
      }
    }
  } catch (e) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:', e.message);
  }

  const training = await prisma.training.findUnique({
    where: { id },
    include: { user: true },
  });

  if (!training) {
    return res.status(404).json({ error: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º, —ç—Ç–æ –ª–∏ –µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
  if (userId && training.userId !== userId) {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
  }

  const dataToUpdate = {
    status,
    attended: status === 'CONFIRMED',
    wasCounted: status === 'CONFIRMED',
  };

  // –û—Ç–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  if (status === 'DECLINED' && training.blockId && training.wasCounted) {
    await prisma.paymentBlock.update({
      where: { id: training.blockId },
      data: {
        used: { decrement: 1 },
      },
    });
    dataToUpdate.wasCounted = false;
    dataToUpdate.attended = false;
  }

  const updated = await prisma.training.update({
    where: { id },
    data: dataToUpdate,
  });

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (training.user?.telegramId && shouldNotifyUser(training.user.telegramId)) {
    const msg =
      status === 'CONFIRMED'
        ? '‚úÖ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ'
        : 'üö´ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏';

    await notifyTelegram(
      training.user.telegramId,
      `üìå –í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${msg}`
    );
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ (ADMIN)
  const trainer = await prisma.user.findFirst({ where: { role: 'ADMIN' } });

  if (trainer?.telegramId && shouldNotifyTrainer(trainer.telegramId)) {
    const dateStr = new Date(training.date).toLocaleDateString();
    const msg =
      status === 'CONFIRMED'
        ? `üë§ ${training.user.name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ ${dateStr} –≤ ${training.hour}:00`
        : `üë§ ${training.user.name} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ ${dateStr} –≤ ${training.hour}:00`;

    await notifyTelegram(trainer.telegramId, msg);
  }

  res.json(updated);
});

export default router;
