import express from "express";
import prisma from "../prisma/index.mjs";
import { authMiddleware } from "../middleware/auth.mjs"; // ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

const router = express.Router();

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
router.get("/", async (req, res) => {
  try {
    const exercises = await prisma.exerciseDefinition.findMany({
      orderBy: { createdAt: "desc" },
      select: {
        id: true,
        name: true,
        category: true,
        createdAt: true,
        usedIn: {
          select: { id: true },
        },
      },
    });
    res.json(exercises);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞" });
  }
});

// üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
router.post("/", authMiddleware, async (req, res) => {
  const { name, category } = req.body;

  if (!name || typeof name !== "string" || name.length < 2) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" });
  }

  if (!category || typeof category !== "string") {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" });
  }

  try {
    const existing = await prisma.exerciseDefinition.findUnique({
      where: { name },
    });

    if (existing) {
      return res.status(409).json({ error: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    const created = await prisma.exerciseDefinition.create({
      data: {
        name,
        category,
      },
    });

    res.json(created);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" });
  }
});

// üîπ –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
router.delete("/:id", authMiddleware, async (req, res) => {
  const { id } = req.params;

  try {
    const exercise = await prisma.exerciseDefinition.findUnique({
      where: { id },
      include: { usedIn: true },
    });

    if (!exercise) {
      return res.status(404).json({ error: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (exercise.usedIn.length > 0) {
      return res.status(400).json({ error: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å ‚Äî —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö" });
    }

    await prisma.exerciseDefinition.delete({ where: { id } });
    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
  }
});

export default router;
