import express from 'express';
import { PrismaClient } from '@prisma/client';
import { authMiddleware } from '../middleware/auth.mjs';

const router = express.Router();
const prisma = new PrismaClient();

// üîπ ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —Ç–æ–∫–µ–Ω—É)
router.get('/user/me/active', authMiddleware, async (req, res) => {
  const userId = req.user?.userId;
  console.log('üì• [GET /user/me/active] req.user:', req.user);

  if (!userId) {
    console.warn('‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–∫–µ–Ω–µ!');
    return res.status(401).json({ error: 'Unauthorized: userId missing from token' });
  }

  try {
    const block = await prisma.paymentBlock.findFirst({
      where: { userId, active: true },
      orderBy: { paidAt: 'desc' },
    });

    if (!block) {
      console.warn(`üì≠ –ê–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId: ${userId}`);
      return res.status(404).json({ error: 'No active block found' });
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫:', block);
    res.json(block);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GET /user/me/active:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –ø–æ userId
router.get('/user/:userId/active', authMiddleware, async (req, res) => {
  const { userId } = req.params;
  console.log('üì• [GET /user/:userId/active] userId:', userId);

  try {
    const block = await prisma.paymentBlock.findFirst({
      where: { userId, active: true },
      orderBy: { paidAt: 'desc' },
    });

    if (!block) {
      console.warn('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è:', userId);
      return res.status(404).json({ error: 'No active block found' });
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫:', block);
    res.json(block);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GET /user/:userId/active:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏ –ø–æ userId (–∏—Å—Ç–æ—Ä–∏—è)
router.get('/user/:userId', authMiddleware, async (req, res) => {
  const { userId } = req.params;
  console.log('üì• [GET /user/:userId] userId:', userId);

  try {
    const blocks = await prisma.paymentBlock.findMany({
      where: { userId },
      orderBy: { paidAt: 'desc' },
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${blocks.length}`);
    res.json(blocks);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GET /user/:userId:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –ø–æ telegramId
router.get('/telegram/:telegramId/active', authMiddleware, async (req, res) => {
  const { telegramId } = req.params;
  console.log('üì• [GET /telegram/:telegramId/active] telegramId:', telegramId);

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      console.warn('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ telegramId');
      return res.status(404).json({ error: 'User not found' });
    }

    const block = await prisma.paymentBlock.findFirst({
      where: { userId: user.id, active: true },
      orderBy: { paidAt: 'desc' },
    });

    if (!block) {
      console.warn('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è telegramId:', telegramId);
      return res.status(404).json({ error: 'No active block found' });
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –ø–æ Telegram:', block);
    res.json(block);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GET /telegram/:telegramId/active:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫ –æ–ø–ª–∞—Ç—ã
router.post('/', authMiddleware, async (req, res) => {
  const { userId, paidAt, paidTrainings, pricePerTraining, pricePerBlock } = req.body;
  console.log('üì§ [POST /] –î–∞–Ω–Ω—ã–µ:', req.body);

  const finalPricePerBlock = pricePerBlock ?? (pricePerTraining * paidTrainings);

  try {
    const newBlock = await prisma.paymentBlock.create({
      data: {
        userId,
        paidAt: new Date(paidAt),
        paidTrainings: Number(paidTrainings),
        pricePerTraining: Number(pricePerTraining),
        pricePerBlock: Number(finalPricePerBlock),
        active: true,
      },
    });

    console.log('‚úÖ –ù–æ–≤—ã–π –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω:', newBlock);

    const result = await prisma.paymentBlock.updateMany({
      where: {
        userId,
        id: { not: newBlock.id },
      },
      data: { active: false },
    });

    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–æ–≤: ${result.count}`);
    res.json(newBlock);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ POST /:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–∫–∞' });
  }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ (used, active, –¥–∞–Ω–Ω—ã–µ)
router.patch('/:id', authMiddleware, async (req, res) => {
  const { id } = req.params;
  const {
    paidAt,
    paidTrainings,
    pricePerTraining,
    pricePerBlock,
    used,
    active,
  } = req.body;

  console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞:', id, req.body);

  try {
    const updated = await prisma.paymentBlock.update({
      where: { id },
      data: {
        paidAt: paidAt ? new Date(paidAt) : undefined,
        paidTrainings: paidTrainings !== undefined ? Number(paidTrainings) : undefined,
        pricePerTraining: pricePerTraining !== undefined ? Number(pricePerTraining) : undefined,
        pricePerBlock: pricePerBlock !== undefined
          ? Number(pricePerBlock)
          : (pricePerTraining && paidTrainings
            ? Number(pricePerTraining) * Number(paidTrainings)
            : undefined),
        used: typeof used === 'number' ? used : undefined,
        active: typeof active === 'boolean' ? active : undefined,
      },
    });

    console.log('‚úÖ –ë–ª–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω:', updated);
    res.json(updated);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ PATCH /:id:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞' });
  }
});

export default router;
