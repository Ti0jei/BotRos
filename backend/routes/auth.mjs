// backend/routes/auth.ts

import express from 'express';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import { authMiddleware } from '../middleware/auth.mjs';
import { resend } from '../utils/resend.mjs';

const router = express.Router();
const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'supersecretkey';
const EMAIL_FROM = process.env.EMAIL_FROM || 'support@krissfit.ru';

// üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
  const { email, password, name, lastName, age, telegramId, inviteCode } = req.body;

  if (!email || !password || !name || !lastName || !age || !inviteCode) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const now = new Date();
  const validCode = await prisma.inviteCode.findFirst({
    where: { code: inviteCode, expiresAt: { gt: now } },
  });

  if (!validCode) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥' });
  }

  const existing = await prisma.user.findUnique({ where: { email } });
  if (existing) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });

  if (telegramId) {
    const existingTg = await prisma.user.findFirst({
      where: { telegramId: BigInt(telegramId).toString() },
    });
    if (existingTg) return res.status(400).json({ error: '–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω' });
  }

  const hashed = await bcrypt.hash(password, 10);
  const emailToken = crypto.randomBytes(32).toString('hex');
  const emailTokenExpires = new Date(Date.now() + 1000 * 60 * 60 * 24);

  const user = await prisma.user.create({
    data: {
      email,
      password: hashed,
      name,
      lastName,
      age: parseInt(age),
      role: 'USER',
      telegramId: telegramId ? BigInt(telegramId).toString() : null,
      internalTag: null,
      emailToken,
      emailTokenExpires,
    },
  });

  await prisma.inviteCode.delete({ where: { id: validCode.id } });

  const verifyUrl = `https://ti0jei-botros-7a22.twc1.net/api/auth/verify?token=${emailToken}`;

  await resend.emails.send({
    from: EMAIL_FROM,
    to: email,
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É',
    html: `
      <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
      <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:</p>
      <p><a href="${verifyUrl}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É</a></p>
      <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
      <p>${verifyUrl}</p>
    `,
  });

  res.json({ message: '–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –¥–ª—è –≤—Ö–æ–¥–∞.' });
});

// üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
router.get('/verify', async (req, res) => {
  const { token } = req.query;
  if (!token || typeof token !== 'string') {
    return res.status(400).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω');
  }

  const user = await prisma.user.findFirst({
    where: {
      emailToken: token,
      emailTokenExpires: { gt: new Date() },
    },
  });

  if (!user) {
    return res.status(400).send('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫');
  }

  await prisma.user.update({
    where: { id: user.id },
    data: {
      emailVerified: true,
      emailToken: null,
      emailTokenExpires: null,
    },
  });

  res.redirect(`https://ti0jei-botros-040b.twc1.net/login?verified=true`);
});

// üîë –í—Ö–æ–¥
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  const user = await prisma.user.findUnique({ where: { email } });
  if (!user) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

  if (!user.emailVerified) {
    return res.status(400).json({ error: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º' });
  }

  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });

  const token = jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET, { expiresIn: '7d' });

  res.json({
    token,
    user: {
      id: user.id,
      name: user.name,
      lastName: user.lastName,
      email: user.email,
      age: user.age,
      role: user.role,
    },
  });
});

// üì¨ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
router.post('/resend', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

  const user = await prisma.user.findUnique({ where: { email } });
  if (!user) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  if (user.emailVerified) return res.status(400).json({ error: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });

  const emailToken = crypto.randomBytes(32).toString('hex');
  const emailTokenExpires = new Date(Date.now() + 1000 * 60 * 60 * 24);

  await prisma.user.update({
    where: { id: user.id },
    data: { emailToken, emailTokenExpires },
  });

  const verifyUrl = `https://ti0jei-botros-7a22.twc1.net/api/auth/verify?token=${emailToken}`;

  await resend.emails.send({
    from: EMAIL_FROM,
    to: email,
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É (–ø–æ–≤—Ç–æ—Ä–Ω–æ)',
    html: `
      <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!</p>
      <p><a href="${verifyUrl}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É</a></p>
      <p>${verifyUrl}</p>
    `,
  });

  res.json({ message: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ' });
});

// üì≤ –ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID (–∏–∑ WebApp)
router.post('/telegram-connect', authMiddleware, async (req, res) => {
  const userId = req.user?.userId;
  const { telegramId } = req.body;

  if (!userId || !telegramId) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
  }

  try {
    const existing = await prisma.user.findFirst({
      where: { telegramId: BigInt(telegramId).toString(), NOT: { id: userId } },
    });

    if (existing) {
      return res.status(400).json({ error: '–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω' });
    }

    await prisma.user.update({
      where: { id: userId },
      data: { telegramId: BigInt(telegramId).toString() },
    });

    res.json({ success: true });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ telegram-connect:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ü§ñ –ü—Ä—è–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∏–∑ –±–æ—Ç–∞
router.post('/telegram-direct', async (req, res) => {
  const { telegramId } = req.body;
  if (!telegramId) return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω telegramId' });

  try {
    const existing = await prisma.user.findFirst({
      where: { telegramId: BigInt(telegramId).toString() },
    });
    if (existing) return res.json({ status: 'already linked' });

    const admin = await prisma.user.findFirst({
      where: { role: 'ADMIN', telegramId: null },
    });

    if (!admin) return res.status(404).json({ error: '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });

    await prisma.user.update({
      where: { id: admin.id },
      data: { telegramId: BigInt(telegramId).toString() },
    });

    res.json({ status: 'linked' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ telegram-direct:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram ID
router.get('/check-telegram', async (req, res) => {
  const { telegramId } = req.query;

  if (!telegramId) {
    return res.status(400).json({ error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  try {
    const user = await prisma.user.findFirst({
      where: { telegramId: BigInt(telegramId).toString() },
    });

    res.json({ exists: !!user });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ check-telegram:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
