import cron from 'node-cron';
import prisma from '../lib/prisma.mjs';
import dayjs from 'dayjs';
import { sendTelegramMessage } from '../lib/telegram.mjs';

// ‚è∞ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00
cron.schedule('0 18 * * *', async () => {
  console.log('üîî [21:00] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ë–ñ–£ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

  try {
    const users = await prisma.user.findMany({
      where: {
        role: 'USER',
        notificationsMuted: false, // ‚úÖ –¢–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ù–ï –æ—Ç–∫–ª—é—á–∏–ª
        telegramId: { not: null }, // ‚úÖ –¢–æ–ª—å–∫–æ —É –∫–æ–≥–æ –µ—Å—Ç—å Telegram ID
      },
      select: {
        id: true,
        telegramId: true,
        name: true, // –¥–ª—è –ª–æ–≥–æ–≤
      },
    });

    const today = dayjs().startOf('day').toDate();

    for (const user of users) {
      try {
        const record = await prisma.nutrition.findUnique({
          where: {
            userId_date: {
              userId: user.id,
              date: today,
            },
          },
        });

        if (!record) {
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${user.name || user.id} ‚Üí ${user.telegramId}`);

          await sendTelegramMessage(
            user.telegramId,
            'üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ö–ë–ñ–£ –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
          );
        } else {
          console.log(`‚úÖ –£–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –ö–ë–ñ–£: ${user.name || user.id}`);
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${user.name || user.id}:`, err);
      }
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ cron:', err);
  }
});
