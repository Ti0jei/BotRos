import dotenv from 'dotenv';
dotenv.config();

import { Telegraf } from 'telegraf';
import { OpenAI } from 'openai';

import { setupCommands } from './commands.mjs';           // üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã
import { setupAiFeatures } from './ai.mjs';                // ü§ñ –ò–ò-–ø–∏—Ç–∞–Ω–∏–µ
import { setupNewsNotification } from './newsNotify.mjs';  // üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
import { setupHandlers } from './handlers.mjs';            // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (attend / decline)

export const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
export const API_URL = process.env.API_BASE_URL;
export const WEB_APP_URL = process.env.WEB_APP_URL;
export const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!TOKEN || !API_URL || !WEB_APP_URL || !OPENAI_API_KEY) {
  console.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

export const bot = new Telegraf(TOKEN);
export const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏—á–∏
setupCommands(bot);              // üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã
setupAiFeatures(bot);           // ü§ñ –ò–ò-–ø–∏—Ç–∞–Ω–∏–µ
setupNewsNotification(bot);     // üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
setupHandlers(bot);             // ‚úÖ –í–∞–∂–Ω–æ: –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É inline-–∫–Ω–æ–ø–æ–∫

// –õ–æ–≤–∏–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
bot.catch((err, ctx) => {
  console.error('‚ùå Unhandled error for update', ctx.update, err);
});

// –í—ã—Ö–æ–¥ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –°—Ç–∞—Ä—Ç
bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
});
