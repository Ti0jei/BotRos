import { bot } from './index.mjs';
import prisma from '../prisma/index.mjs';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number|string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} text - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string|null} trainingId - ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
 */
export async function notifyTelegram(telegramId, text, trainingId = null) {
  if (!telegramId || !text) {
    console.warn('‚ùó notifyTelegram: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    return;
  }

  try {
    const extra = trainingId
      ? {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ë—É–¥—É', callback_data: `attend:${trainingId}` },
                { text: '‚ùå –ù–µ –±—É–¥—É', callback_data: `decline:${trainingId}` },
              ],
            ],
          },
        }
      : {};

    const sentMessage = await bot.telegram.sendMessage(telegramId, text, extra);
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${telegramId}${trainingId ? ' (—Å –∫–Ω–æ–ø–∫–∞–º–∏)' : ''}`);

    const timeoutMs = trainingId ? 5 * 24 * 60 * 60 * 1000 : 60 * 1000; // 5 –¥–Ω–µ–π –∏–ª–∏ 60 —Å–µ–∫—É–Ω–¥
    scheduleDelete(telegramId, sentMessage.message_id, timeoutMs);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, err.message);
  }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–æ–ª–∏
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {'USER' | 'ADMIN'} role - –¶–µ–ª–µ–≤–∞—è —Ä–æ–ª—å
 * @returns {{ success: number, total: number }}
 */
export async function notifyBroadcast(text, role = 'USER') {
  if (!['USER', 'ADMIN'].includes(role)) {
    console.warn(`‚ùó notifyBroadcast: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å ${role}`);
    return { success: 0, total: 0 };
  }

  if (typeof text !== 'string' || text.trim().length < 5) {
    console.warn('‚ùó notifyBroadcast: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
    return { success: 0, total: 0 };
  }

  try {
    const users = await prisma.user.findMany({
      where: {
        role,
        telegramId: { not: null },
        active: true,
      },
      select: { telegramId: true },
    });

    let success = 0;

    for (const user of users) {
      try {
        if (!user.telegramId || typeof user.telegramId !== 'number') continue;

        const sent = await bot.telegram.sendMessage(user.telegramId, `üì∞ ${text}`);
        success++;

        scheduleDelete(user.telegramId, sent.message_id, 60_000); // —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫
      } catch (err) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${user.telegramId}:`, err.message);
      }
    }

    console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${success}/${users.length} —É—Å–ø–µ—à–Ω–æ.`);
    return { success, total: users.length };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ notifyBroadcast:', err.message);
    return { success: 0, total: 0 };
  }
}

/**
 * –ü–ª–∞–Ω–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function scheduleDelete(telegramId, messageId, ms) {
  setTimeout(() => {
    bot.telegram.deleteMessage(telegramId, messageId).catch((err) => {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –¥–ª—è ${telegramId}:`, err.message);
    });
  }, ms);
}
