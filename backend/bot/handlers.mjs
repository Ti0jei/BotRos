import { Markup } from 'telegraf';
import { WEB_APP_URL, API_URL } from './index.mjs';
import { aiContexts } from './ai.mjs';
import { clearSession } from './context.mjs';
import { isRegistered } from './middleware.mjs';
import fetch from 'node-fetch';

export async function showMainMenu(ctx) {
  const telegramId = ctx.from?.id;
  const name = ctx.from?.first_name || '–ì–æ—Å—Ç—å';

  aiContexts.delete(telegramId);
  clearSession(telegramId);

  const role = ctx.state?.user?.role;

  const keyboard = [
    [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${WEB_APP_URL}?tid=${telegramId}` } }],
    [{ text: 'ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é', callback_data: 'ai_nutrition' }],
  ];

  if (role === 'ADMIN') {
    keyboard.push([{ text: 'üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data: 'notify_start' }]);
  } else {
    keyboard.push([{ text: 'üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url: 'https://t.me/krippsii' }]);
  }

  await ctx.reply(`üëã ${name}, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:`, {
    reply_markup: { inline_keyboard: keyboard },
  });
}

export function setupHandlers(bot) {
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  bot.command('menu', isRegistered, showMainMenu);

  bot.hears('üìã –ú–µ–Ω—é', isRegistered, async (ctx) => {
    try {
      await ctx.deleteMessage(ctx.message.message_id);
    } catch (_) {}
    await showMainMenu(ctx);
  });

  // –ö–Ω–æ–ø–∫–∞ "‚úÖ –ë—É–¥—É"
  bot.action(/^attend:(.+)$/, isRegistered, async (ctx) => {
    const trainingId = ctx.match[1];
    const token = ctx.state?.token;

    try {
      await fetch(`${API_URL}/api/trainings/${trainingId}`, {
        method: 'PATCH',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: 'CONFIRMED' }),
      });

      await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
      await ctx.reply('üü¢ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–¥—ë—Ç–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err.message);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞');
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –ö–Ω–æ–ø–∫–∞ "‚ùå –ù–µ –±—É–¥—É"
  bot.action(/^decline:(.+)$/, isRegistered, async (ctx) => {
    const trainingId = ctx.match[1];
    const token = ctx.state?.token;

    try {
      await fetch(`${API_URL}/api/trainings/${trainingId}`, {
        method: 'PATCH',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: 'DECLINED' }),
      });

      await ctx.answerCbQuery('‚ùå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
      await ctx.reply('üî¥ –û–∫–µ–π! –ú—ã —É—á—Ç—ë–º, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–∏–¥—ë—Ç–µ');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err.message);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞');
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}
