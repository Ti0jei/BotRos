import { Markup } from 'telegraf';
import { isRegistered } from './middleware.mjs';
import { notifyBroadcast } from '../utils/broadcast.mjs'; // üì¶ –†–∞—Å—Å—ã–ª–∫–∞

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
 * @param {Telegraf} bot
 */
export function setupNewsNotification(bot) {
  // –°—Ç–∞—Ä—Ç: –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
  bot.action('notify_start', isRegistered, async (ctx) => {
    ctx.session.notifyState = { step: 'choose_role' };

    await ctx.answerCbQuery('‚úÖ');
    await ctx.reply('–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?', Markup.inlineKeyboard([
      [Markup.button.callback('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'notify_to_users')],
      [Markup.button.callback('üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', 'notify_to_admins')],
    ]));
  });

  // –í—ã–±–æ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  bot.action('notify_to_users', isRegistered, async (ctx) => {
    const state = ctx.session?.notifyState;
    if (!state || state.step !== 'choose_role') return;

    state.role = 'USER';
    state.step = 'awaiting_text';

    await ctx.answerCbQuery();
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  });

  // –í—ã–±–æ—Ä: –∞–¥–º–∏–Ω—ã
  bot.action('notify_to_admins', isRegistered, async (ctx) => {
    const state = ctx.session?.notifyState;
    if (!state || state.step !== 'choose_role') return;

    state.role = 'ADMIN';
    state.step = 'awaiting_text';

    await ctx.answerCbQuery();
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:');
  });

  // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
  bot.on('text', isRegistered, async (ctx, next) => {
    const state = ctx.session?.notifyState;

    if (!state || state.step !== 'awaiting_text') return next(); // –ø–µ—Ä–µ–¥–∞—ë–º –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º

    const message = ctx.message.text.trim();
    if (message.length < 10) {
      return ctx.reply('‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.');
    }

    state.text = message;
    state.step = 'awaiting_confirm';

    await ctx.reply(
      `üì® –í–æ—Ç —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n\n${state.text}`,
      Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'notify_confirm'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'notify_cancel'),
      ])
    );
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  bot.action('notify_confirm', isRegistered, async (ctx) => {
    const state = ctx.session?.notifyState;

    if (!state?.text || !state?.role) return;

    await ctx.answerCbQuery('üöÄ');
    await ctx.reply('üöÄ –†–∞—Å—Å—ã–ª–∞—é...');

    try {
      const result = await notifyBroadcast(state.text, state.role); // üì®
      delete ctx.session.notifyState;
      await ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${result.success}/${result.total} (${state.role}).`);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:', err);
      delete ctx.session.notifyState;
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.');
    }
  });

  // –û—Ç–º–µ–Ω–∞
  bot.action('notify_cancel', isRegistered, async (ctx) => {
    delete ctx.session.notifyState;
    await ctx.answerCbQuery('‚ùå');
    await ctx.reply('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  });
}
